"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[5758],{935:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"standard-library/allocators/interface","title":"Allocator interface","description":"Allocators follow a simple design","source":"@site/docs/standard-library/allocators/interface.md","sourceDirName":"standard-library/allocators","slug":"/standard-library/allocators/interface","permalink":"/terra-website/docs/standard-library/allocators/interface","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard-library/allocators/interface.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"A smart memory block","permalink":"/terra-website/docs/standard-library/allocators/memory-block"},"next":{"title":"Custom Allocators","permalink":"/terra-website/docs/standard-library/allocators/custom-allocators"}}');var o=a(4848),n=a(8453);const s={},l="Allocator interface",c={},i=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"allocator-interface",children:"Allocator interface"})}),"\n",(0,o.jsx)(t.p,{children:"Allocators follow a simple design: an allocator implements the following interface:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-terra",children:"local Allocator = interface.Interface:new{\n    allocate = {size_t, size_t} -> {block},\n    reallocate = {&block, size_t, size_t} -> {},\n    deallocate = {&block} -> {},\n    owns = {&block} -> {bool}\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"where 'block = block(opaque)'."}),"\n",(0,o.jsx)(t.p,{children:"Interfaces, such as the one here, are essentially opaque objects that are equiped with a vtable containing function pointers to the actual implementations at runtime. They can simply be passed by reference and do not require any template metaprogramming, since its based on runtime polymorphism."})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>l});var r=a(6540);const o={},n=r.createContext(o);function s(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);