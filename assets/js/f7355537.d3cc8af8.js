"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[3910],{1471:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-language/resource-management/core-concepts","title":"Core concepts","description":"Below we summarize the core concepts and rules relevant to resource management in Terra. These concepts will be explained in greater detail in the next sections.","source":"@site/docs/core-language/resource-management/core-concepts.md","sourceDirName":"core-language/resource-management","slug":"/core-language/resource-management/core-concepts","permalink":"/terra-website/docs/core-language/resource-management/core-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-language/resource-management/core-concepts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Resource management in Terra","permalink":"/terra-website/docs/core-language/resource-management/intro"},"next":{"title":"Ownership model","permalink":"/terra-website/docs/core-language/resource-management/ownership-model"}}');var s=a(4848),l=a(8453);const r={},i="Core concepts",o={},c=[{value:"Rule of three",id:"rule-of-three",level:2},{value:"Managed types",id:"managed-types",level:2},{value:"Copyable types",id:"copyable-types",level:2},{value:"Movable types",id:"movable-types",level:2},{value:"L-values, R-values and B-values",id:"l-values-r-values-and-b-values",level:2},{value:"Move-By-Default",id:"move-by-default",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"core-concepts",children:"Core concepts"})}),"\n",(0,s.jsx)(n.p,{children:"Below we summarize the core concepts and rules relevant to resource management in Terra. These concepts will be explained in greater detail in the next sections."}),"\n",(0,s.jsx)(n.h2,{id:"rule-of-three",children:"Rule of three"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__init :: &T -> {}"}),": Object initialization. Default generation setting pointers to nil."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__copy :: {&T, &T} -> {}"}),": Optional copy-assignment for l-values. Auto-generation for copyable aggregate types. Supports source and receiver to be of different types when manually implemented."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__dtor :: &T -> {}"}),": User-defined destructor. No default generation."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"managed-types",children:"Managed types"}),"\n",(0,s.jsxs)(n.p,{children:["A struct is managed if it implements ",(0,s.jsx)(n.code,{children:"__dtor"}),". Managed types require explicit resource cleanup (e.g., freeing heap memory). Without ",(0,s.jsx)(n.code,{children:"__dtor"}),", a type behaves as a regular stack-allocated object with no special management."]}),"\n",(0,s.jsx)(n.h2,{id:"copyable-types",children:"Copyable types"}),"\n",(0,s.jsx)(n.p,{children:"A type is copyable if:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"It is primitive type (e.g., int, double) or a simd vector type or a function pointer, which are all trivially copyable by default."}),"\n",(0,s.jsx)(n.li,{children:"An unmanaged struct with trivially copyable fields."}),"\n",(0,s.jsxs)(n.li,{children:["It is a managed struct with a ",(0,s.jsx)(n.code,{children:"__copy"})," method, either:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"User-defined;"}),"\n",(0,s.jsx)(n.li,{children:"Auto-generated for aggregates where all fields are copyable and at least one is a managed type."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["An array with an element type is trivially copyable or uses ",(0,s.jsx)(n.code,{children:"__copy"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A type is not copyable if:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"It is a pointer type, excluding function pointers."}),"\n",(0,s.jsxs)(n.li,{children:["It is a managed struct type that does not implement a ",(0,s.jsx)(n.code,{children:"__copy"})," method. In this case the trait ",(0,s.jsx)(n.code,{children:"T.iscopyable = false"})," will be set automatically."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"movable-types",children:"Movable types"}),"\n",(0,s.jsx)(n.p,{children:"Unmanaged types are generally moveable but just invoke a memcopy. A managed type is movable if it can be transferred via a move. Key rules:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["All managed types (those with ",(0,s.jsx)(n.code,{children:"__dtor"}),") are movable by default."]}),"\n",(0,s.jsxs)(n.li,{children:["A type ",(0,s.jsx)(n.code,{children:"T"})," can be made immovable by setting the type trait ",(0,s.jsx)(n.code,{children:"T.ismovable = false"}),", in which case moving will be prohibited at compile-time."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For managed types the move from a source to a reciever is implemented as follows: (1) the reciever's __dtor is called first, followed by a memcopy from source to receiver and subsequent initialization of the source."}),"\n",(0,s.jsx)(n.h2,{id:"l-values-r-values-and-b-values",children:"L-values, R-values and B-values"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["L-values are values that have been explicity allocated using a ",(0,s.jsx)(n.code,{children:"var ..."})," statement."]}),"\n",(0,s.jsx)(n.li,{children:"R-values are temporary objects typically a result from a function call."}),"\n",(0,s.jsxs)(n.li,{children:["B-values are reference objects (",(0,s.jsx)(n.code,{children:"&T"}),"). They enable borrowing, allowing the caller to retain ownership while the callee operates on the resource."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"move-by-default",children:"Move-By-Default"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the source variable is an L-value of a managed type that is copyable then passing-by-value in a function call or an assignment invokes the ",(0,s.jsx)(n.code,{children:"__copy"})," method."]}),"\n",(0,s.jsx)(n.li,{children:"If the source variable is an L-value of a managed type that is not copyable but is movable then passing-by-value in a function call or an assignment invokes a compiler implemented move assignment."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var t=a(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);