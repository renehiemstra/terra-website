"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[8127],{3517:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"standard-library/unit-testing/parameterized-tests","title":"Parameterized testing","description":"Consider the following Vector class:","source":"@site/docs/standard-library/unit-testing/parameterized-tests.md","sourceDirName":"standard-library/unit-testing","slug":"/standard-library/unit-testing/parameterized-tests","permalink":"/terra-website/docs/standard-library/unit-testing/parameterized-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard-library/unit-testing/parameterized-tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Test-sets","permalink":"/terra-website/docs/standard-library/unit-testing/organizing-tests-testset"},"next":{"title":"Parallel test-runner","permalink":"/terra-website/docs/standard-library/unit-testing/parallel-test-suites"}}');var r=s(4848),i=s(8453);const a={},l="Parameterized testing",d={},c=[];function o(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"parameterized-testing",children:"Parameterized testing"})}),"\n",(0,r.jsxs)(t.p,{children:["Consider the following ",(0,r.jsx)(t.code,{children:"Vector"})," class:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:"SVector = terralib.memoize(function(T,N)\n    local struct Vector{\n        _data : T[N]\n    }  \n    local Class = {}\n    Class.Vector = Vector\n \n    terra Vector:size() : int\n        return N \n    end\n       \n    Vector.metamethods.__apply = macro(function(self,idx)\n        return `self._data[idx]\n    end)\n       \n    terra Class.fill(a : T) : Vector\n        var v : Vector\n        for i = 0,N do\n            v(i) = a\n        end\n        return v\n    end\n    return Class\nend)\n"})}),"\n",(0,r.jsx)(t.p,{children:"A set of tests could look as follows:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:'import "terratest" -- using the terra unit test library\n       \ntestenv "Vector implementation" do\n    \n    local N = 3\n    local T = int32\n\n    testset "fill" do\n      local SVec = SVector(T,N)                      \n      terracode                              \n        var y = SVec.fill(3)\n      end\n      test y:size()==N\n      for i=0,N-1 do          \n        test y(i)==T(3)\n      end\n    end\n\nend --testenv\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Testing multiple vector sizes and element types in a single test suite would make it far more effective. This can be easily achieved by parameterizing the test suite described above. There are several approaches to accomplish this. One method is to parameterize only the testset blocks within a ",(0,r.jsx)(t.code,{children:"testenv"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:'import "terratest" -- using the terra unit test library\n       \ntestenv "Vector implementation" do\n  \nfor _,T in pairs{int32,int64} do\n  for N=2,3 do  \n\n    --parameterized testset      \n    testset(N,T) "fill" do\n      local SVec = SVector(T,N)                      \n      terracode                              \n        var y = SVec.fill(3)\n      end\n      test y:size()==N\n      for i=0,N-1 do          \n        test y(i)==T(3)\n      end\n    end\n\n  end\nend\n\nend --testenv\n'})}),"\n",(0,r.jsx)(t.p,{children:"which prints out the following test results"}),"\n",(0,r.jsxs)("pre",{children:[(0,r.jsx)("div",{class:"string",children:"Test Environment: \tVector implementation"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill(N=2,T=int32)"}),(0,r.jsx)("div",{class:"test-passed",children:"    3/3 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill(N=3,T=int32)"}),(0,r.jsx)("div",{class:"test-passed",children:"    4/4 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill(N=2,T=int64)"}),(0,r.jsx)("div",{class:"test-passed",children:"    3/3 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill(N=3,T=int64)"}),(0,r.jsx)("div",{class:"test-passed",children:"    4/4 tests passed"})]}),"\n",(0,r.jsxs)(t.p,{children:["Alternatively, we can parameterize the ",(0,r.jsx)(t.code,{children:"testenv"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:'for _,T in pairs{int32,int64} do\n  for N=2,3 do          \n       \n    --parameterized testenv        \n    testenv(N,T) "Vector implementation" do\n  \n      --parameterized testset          \n      testset "fill" do\n        local SVec = SVector(T,N)                          \n        terracode                                  \n          var y = SVec.fill(3)\n        end \n        test y:size()==N\n        for i=0,N-1 do              \n          test y(i)==T(3)\n        end \n      end \n  \n    end --testenv\n\n  end --N\nend --T\n'})}),"\n",(0,r.jsx)(t.p,{children:"which prints out the results as follows:"}),"\n",(0,r.jsxs)("pre",{children:[(0,r.jsx)("div",{class:"string",children:"Test Environment: \tVector implementation(N=2,T=int32)"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill"}),(0,r.jsx)("div",{class:"test-passed",children:"    3/3 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"Test Environment: \tVector implementation(N=3,T=int32)"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill"}),(0,r.jsx)("div",{class:"test-passed",children:"    4/4 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"Test Environment: \tVector implementation(N=2,T=int64)"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill"}),(0,r.jsx)("div",{class:"test-passed",children:"    3/3 tests passed"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"Test Environment: \tVector implementation(N=3,T=int64)"}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{class:"string",children:"testset:\t\tfill"}),(0,r.jsx)("div",{class:"test-passed",children:"    4/4 tests passed"})]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);