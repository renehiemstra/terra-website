"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[5366],{8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>c});var n=t(6540);const o={},i=n.createContext(o);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:r},e.children)}},8845:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"introduction-metaprogramming/hello-world","title":"First metaproramming example","description":"We begin with metaprogramming in terra by reproducing the C example from","source":"@site/docs/introduction-metaprogramming/hello-world.md","sourceDirName":"introduction-metaprogramming","slug":"/introduction-metaprogramming/hello-world","permalink":"/terra-website/docs/introduction-metaprogramming/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/introduction-metaprogramming/hello-world.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction into metaproramming","permalink":"/terra-website/docs/introduction-metaprogramming/intro"},"next":{"title":"Resource management in Terra","permalink":"/terra-website/docs/resource-management/intro"}}');var o=t(4848),i=t(8453);const a={},c="First metaproramming example",s={},l=[];function d(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"first-metaproramming-example",children:"First metaproramming example"})}),"\n",(0,o.jsxs)(r.p,{children:["We begin with metaprogramming in ",(0,o.jsx)(r.code,{children:"terra"})," by reproducing the ",(0,o.jsx)(r.code,{children:"C"})," example from\nthe introduction:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-terra",children:'local MSG = "Hello, World!"\nlocal C = terralib.includec("stdio.h")\n\nterra main()\n  C.printf(MSG .. "\\n")\n  return 0\nend\nmain()\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Compared to the ",(0,o.jsx)(r.code,{children:"C"})," version we observe that ",(0,o.jsx)(r.code,{children:"MSG"})," is not a macro but a valid\n",(0,o.jsx)(r.code,{children:"lua"})," variable. The same applies to the ",(0,o.jsx)(r.code,{children:"C"})," wrapper imported with ",(0,o.jsx)(r.code,{children:"terralib.includec"}),".\nAs we will see later, it is stored as a ",(0,o.jsx)(r.code,{children:"lua"})," table!\nFunction calls from ",(0,o.jsx)(r.code,{children:"stdio.h"})," inside the ",(0,o.jsx)(r.code,{children:"main"})," function are then simple index\noperations on this table. Note that in the last line of our example we explicitly\ncall ",(0,o.jsx)(r.code,{children:"main"}),". In contrast to ",(0,o.jsx)(r.code,{children:"C"}),", where the function ",(0,o.jsx)(r.code,{children:"main"})," is always executed,\n",(0,o.jsx)(r.code,{children:"terra"})," does not run a compiled function by default."]})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);