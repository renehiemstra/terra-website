"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[1622],{320:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"resource-management/summary","title":"summary","description":"I am developing a new resource management system for the Terra programming language. The new approach uses scope-bound-resource management, which enable Terra\'s powerful metaprogramming abilities while maintaining low-level performance.","source":"@site/docs/resource-management/summary.md","sourceDirName":"resource-management","slug":"/resource-management/summary","permalink":"/terra-website/docs/resource-management/summary","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resource-management/summary.md","tags":[],"version":"current","frontMatter":{}}');var r=s(4848),i=s(8453);const l={},t="Core concepts",o={},c=[{value:"Rule of three",id:"rule-of-three",level:2},{value:"Managed types",id:"managed-types",level:2},{value:"Copyable types",id:"copyable-types",level:2},{value:"Movable types",id:"movable-types",level:2},{value:"L-values, R-values and B-values",id:"l-values-r-values-and-b-values",level:2},{value:"Move-By-Default",id:"move-by-default",level:2},{value:"L-Values, R-Values, and B-Values",id:"l-values-r-values-and-b-values-1",level:2},{value:"Passing by value or by reference",id:"passing-by-value-or-by-reference",level:2},{value:"Planned safety features",id:"planned-safety-features",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"I am developing a new resource management system for the Terra programming language. The new approach uses scope-bound-resource management, which enable Terra's powerful metaprogramming abilities while maintaining low-level performance."}),"\n",(0,r.jsx)(n.p,{children:"In the following I will explain the ownership model, core concepts such that we can analyze the correctness of the approach. Subsequently, I will need you help documenting the approach."}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"core-concepts",children:"Core concepts"})}),"\n",(0,r.jsx)(n.p,{children:"Below we summarize the core concepts and rules relevant to resource management in Terra. These concepts will be explained in greater detail in the next sections."}),"\n",(0,r.jsx)(n.h2,{id:"rule-of-three",children:"Rule of three"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__init :: &T -> {}"}),": Object initialization. Default generation setting pointers to nil."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__copy :: {&T, &T} -> {}"}),": Optional copy-assignment for l-values. Auto-generation for copyable aggregate types. Supports source and receiver to be of different types when manually implemented."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"__dtor :: &T -> {}"}),": User-defined destructor. No default generation."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"managed-types",children:"Managed types"}),"\n",(0,r.jsxs)(n.p,{children:["A struct is managed if it implements ",(0,r.jsx)(n.code,{children:"__dtor"}),". Managed types require explicit resource cleanup (e.g., freeing heap memory). Without ",(0,r.jsx)(n.code,{children:"__dtor"}),", a type behaves as a regular stack-allocated object with no special management."]}),"\n",(0,r.jsx)(n.h2,{id:"copyable-types",children:"Copyable types"}),"\n",(0,r.jsx)(n.p,{children:"A type is copyable if:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"It is primitive type (e.g., int, double) or a simd vector type or a function pointer, which are all trivially copyable by default."}),"\n",(0,r.jsx)(n.li,{children:"An unmanaged struct with trivially copyable fields."}),"\n",(0,r.jsxs)(n.li,{children:["It is a managed struct with a ",(0,r.jsx)(n.code,{children:"__copy"})," method, either:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User-defined;"}),"\n",(0,r.jsx)(n.li,{children:"Auto-generated for aggregates where all fields are copyable and at least one is a managed type."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["An array with an element type is trivially copyable or uses ",(0,r.jsx)(n.code,{children:"__copy"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A type is not copyable if:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"It is a pointer type, excluding function pointers."}),"\n",(0,r.jsxs)(n.li,{children:["It is a managed struct type that does not implement a ",(0,r.jsx)(n.code,{children:"__copy"})," method. In this case the trait ",(0,r.jsx)(n.code,{children:"T.iscopyable = false"})," will be set automatically."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"movable-types",children:"Movable types"}),"\n",(0,r.jsx)(n.p,{children:"Unmanaged types are generally moveable but just invoke a memcopy. A managed type is movable if it can be transferred via a move. Key rules:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["All managed types (those with ",(0,r.jsx)(n.code,{children:"__dtor"}),") are movable by default."]}),"\n",(0,r.jsxs)(n.li,{children:["A type ",(0,r.jsx)(n.code,{children:"T"})," can be made immovable by setting the type trait ",(0,r.jsx)(n.code,{children:"T.ismovable = false"}),", in which case moving will be prohibited at compile-time."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For managed types the move from a source to a reciever is implemented as follows: (1) the reciever's __dtor is called first, followed by a memcopy from source to receiver and subsequent initialization of the source."}),"\n",(0,r.jsx)(n.h2,{id:"l-values-r-values-and-b-values",children:"L-values, R-values and B-values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["L-values are values that have been explicity allocated using a ",(0,r.jsx)(n.code,{children:"var ..."})," statement."]}),"\n",(0,r.jsx)(n.li,{children:"R-values are temporary objects typically a result from a function call."}),"\n",(0,r.jsxs)(n.li,{children:["B-values are reference objects (",(0,r.jsx)(n.code,{children:"&T"}),"). They enable borrowing, allowing the caller to retain ownership while the callee operates on the resource."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"move-by-default",children:"Move-By-Default"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the source variable is an L-value of a managed type that is copyable then passing-by-value in a function call or an assignment invokes the ",(0,r.jsx)(n.code,{children:"__copy"})," method."]}),"\n",(0,r.jsx)(n.li,{children:"If the source variable is an L-value of a managed type that is not copyable but is movable then passing-by-value in a function call or an assignment invokes a compiler implemented move assignment."}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"new-ownership-model",children:"New ownership model"}),"\n",(0,r.jsx)(n.p,{children:"Terra\u2019s new ownership model ensures every resource has exactly one owner at any time, akin to Rust\u2019s single-ownership principle, preventing data races, dangling pointers, and double-free errors. This model guarantees safety in sequential and shared memory parallel contexts through strict resource transfer and access rules."}),"\n",(0,r.jsx)(n.h2,{id:"l-values-r-values-and-b-values-1",children:"L-Values, R-Values, and B-Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["L-Values: Values explicitly allocated with a var statement (e.g., ",(0,r.jsx)(n.code,{children:"var x : T"})," or ",(0,r.jsx)(n.code,{children:"var x = ..."}),"). They represent named, persistent objects with a defined lifetime."]}),"\n",(0,r.jsx)(n.li,{children:"R-Values: Temporary objects, typically resulting from function calls. They are short-lived and exist only within their expression."}),"\n",(0,r.jsxs)(n.li,{children:["B-Values: Reference objects (",(0,r.jsx)(n.code,{children:"&T"}),"), enabling borrowing. They allow the caller to retain ownership while the callee operates on the resource without transferring it."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"passing-by-value-or-by-reference",children:"Passing by value or by reference"}),"\n",(0,r.jsx)(n.p,{children:"Passing objects to functions or in an assignment can be done in two ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["By value: Transfers ownership to the receiver.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["L-values: Use the ",(0,r.jsx)(n.code,{children:"__copy"})," method if defined, duplicating the resource, or default to transfering ownership using a move."]}),"\n",(0,r.jsx)(n.li,{children:"R-Values: Always transfer ownership by a move (implemented as a memcopy - shallow copy - in the compiler). Terra's aggressive inlining and LLVM optimizations mean that temporaries are reduced in many scenario's."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["By Reference (B-Values): Grants temporary access via ",(0,r.jsx)(n.code,{children:"&T"}),". No ownership transfer occurs; the original owner retains responsibility for cleanup via ",(0,r.jsx)(n.code,{children:"__dtor"})," in case of managed types."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"planned-safety-features",children:"Planned safety features"}),"\n",(0,r.jsx)(n.p,{children:"Terra\u2019s single-ownership model enables compile-time verification of resource safety for sequential and parallel programs. The following enhancements will strengthen this model:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initialization Tracking:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tracks variable initialization at compile time."}),"\n",(0,r.jsx)(n.li,{children:"Flags use of uninitialized variables (e.g., after a move) as compile errors."}),"\n",(0,r.jsxs)(n.li,{children:["Skips ",(0,r.jsx)(n.code,{children:"__dtor"})," for uninitialized objects, improving safety and efficiency."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Constant References (",(0,r.jsx)(n.code,{children:"const&"}),"):"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Enforces read-only access (",(0,r.jsx)(n.code,{children:"const& T"}),") recursively at compile time."]}),"\n",(0,r.jsx)(n.li,{children:"Allows safe, unsynchronized sharing in parallel programs."}),"\n",(0,r.jsxs)(n.li,{children:["Complements ",(0,r.jsx)(n.code,{children:"__move"})," and ",(0,r.jsx)(n.code,{children:"&T"})," with immutable borrowing."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var a=s(6540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);