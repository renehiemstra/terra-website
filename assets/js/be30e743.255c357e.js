"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[1434],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},9946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"standard-library/unit-testing/writing-tests","title":"Writing and evaluating tests","description":"Tests may combine both lua and terra code. For example, the following code directly evaluates a lua statement","source":"@site/docs/standard-library/unit-testing/writing-tests.mdx","sourceDirName":"standard-library/unit-testing","slug":"/standard-library/unit-testing/writing-tests","permalink":"/terra-website/docs/standard-library/unit-testing/writing-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard-library/unit-testing/writing-tests.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Unit-testing","permalink":"/terra-website/docs/standard-library/unit-testing/intro"},"next":{"title":"Test-environments","permalink":"/terra-website/docs/standard-library/unit-testing/organizing-tests-testenv"}}');var r=n(4848),a=n(8453);const i={},d="Writing and evaluating tests",o={},l=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"writing-and-evaluating-tests",children:"Writing and evaluating tests"})}),"\n",(0,r.jsx)(t.p,{children:"Tests may combine both lua and terra code. For example, the following code directly evaluates a lua statement"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:"local a = 1\nlocal b = 2\ntest a+1==b\n"})}),"\n",(0,r.jsx)(t.p,{children:"and the following snippet involves a terra function"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-terra",children:"terra foo(a : int)\n  return a+1\nend\ntest f(1)==2\ntest f(2)==4\n"})}),"\n",(0,r.jsx)(t.p,{children:"If a test fails then the linenumber and filename of the test statement is printed for convenience. For example, the above code returns"}),"\n",(0,r.jsxs)("pre",{children:[(0,r.jsx)("div",{class:"test-passed",children:"  test passed"}),(0,r.jsx)("div",{class:"test-passed",children:"  test passed"}),(0,r.jsx)("div",{class:"test-failed",children:"  test failed in test.t, linenumber 11"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"test"})," always expects a boolean result."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);