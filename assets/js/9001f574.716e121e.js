"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[6299],{4381:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"standard-library/unit-testing/organizing-tests-testenv","title":"Test-environments","description":"Although tests can be used directly inline as shown above, it is useful to organize them inside a scoped environment called testenv. This environement keeps track of some test statistics, which get printed to stdout. Here is an example","source":"@site/docs/standard-library/unit-testing/organizing-tests-testenv.md","sourceDirName":"standard-library/unit-testing","slug":"/standard-library/unit-testing/organizing-tests-testenv","permalink":"/terra-website/docs/standard-library/unit-testing/organizing-tests-testenv","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard-library/unit-testing/organizing-tests-testenv.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Writing and evaluating tests","permalink":"/terra-website/docs/standard-library/unit-testing/writing-tests"},"next":{"title":"Test-sets","permalink":"/terra-website/docs/standard-library/unit-testing/organizing-tests-testset"}}');var i=n(4848),r=n(8453);const a={},o="Test-environments",d={},c=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-environments",children:"Test-environments"})}),"\n",(0,i.jsxs)(t.p,{children:["Although tests can be used directly inline as shown above, it is useful to organize them inside a scoped environment called ",(0,i.jsx)(t.code,{children:"testenv"}),". This environement keeps track of some test statistics, which get printed to stdout. Here is an example"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-terra",children:'import "terratest"           \n   \nlocal a = 1  \nlocal b = 3  \n   \ntestenv "my test environement" do\n  local c = 10\n  terracode   \n    var x = 1\n    var y = 2\n  end\n  test a*b==3\n  test a*b==4 --false\n  test a+b+c==14\n  test a+b+c==15 --false\n  test a+b+c==x+y+11\nend \n'})}),"\n",(0,i.jsxs)(t.p,{children:["To evaluate the tests in the testenvironment, you need to run terra with the command-line-option ",(0,i.jsx)(t.code,{children:"--test"})," or ",(0,i.jsx)(t.code,{children:"-t"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"terra test3.t --test\n"})}),"\n",(0,i.jsx)(t.p,{children:"which prints out"}),"\n",(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{class:"string",children:"Test Environment: \tmy test environement"}),(0,i.jsx)("br",{}),(0,i.jsx)("div",{class:"string",children:"inline tests:"}),(0,i.jsx)("div",{class:"test-passed",children:"    3/5 tests passed"}),(0,i.jsx)("div",{class:"test-failed",children:"    2/5 tests failed"}),(0,i.jsx)("br",{}),(0,i.jsx)("div",{class:"test-failed",children:"    test failed in test3.t, linenumber 13"}),(0,i.jsx)("div",{class:"test-failed",children:"    test failed in test3.t, linenumber 15"})]}),"\n",(0,i.jsxs)(t.p,{children:["Notice that the test environment is given a name, which gets printed to stdout. Lua variables may be directly declared and terra variables are declared inside a ",(0,i.jsx)(t.code,{children:"terracode"})," block, which is just a collection of terra statements, not scoped environement. Notice that terra variables and lua variables may be logically combined and that lexical scoping rules apply."]}),"\n",(0,i.jsx)(t.admonition,{title:"Important",type:"caution",children:(0,i.jsx)(t.p,{children:"Test-environments are isolated from one another preventing unintended interference between tests."})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);