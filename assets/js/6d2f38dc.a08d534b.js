"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[9911],{1004:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"features/script-with-c-performance","title":"Script with C-performance","description":"Terra is a simple and expressive statically typed compiled language built on top of LuaJIT, the fastest JIT-compiler in the West. This unique combination allows Terra to deliver performance comparable to C while maintaining the flexibility and ease of a scripting language.","source":"@site/docs/features/script-with-c-performance.md","sourceDirName":"features","slug":"/features/script-with-c-performance","permalink":"/terra-website/docs/features/script-with-c-performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/features/script-with-c-performance.md","tags":[],"version":"current","frontMatter":{"id":"script-with-c-performance","title":"Script with C-performance"}}');var a=t(4848),i=t(8453);const c={id:"script-with-c-performance",title:"Script with C-performance"},o="Script with C-performance",s={},l=[{value:"High Performance via LuaJIT",id:"high-performance-via-luajit",level:2}];function p(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"script-with-c-performance",children:"Script with C-performance"})}),"\n",(0,a.jsx)(r.p,{children:"Terra is a simple and expressive statically typed compiled language built on top of LuaJIT, the fastest JIT-compiler in the West. This unique combination allows Terra to deliver performance comparable to C while maintaining the flexibility and ease of a scripting language."}),"\n",(0,a.jsx)(r.h2,{id:"high-performance-via-luajit",children:"High Performance via LuaJIT"}),"\n",(0,a.jsxs)(r.p,{children:["Terra leverages LuaJIT\u2019s powerful JIT (Just-In-Time) compilation capabilities, which use the same LLVM backend as Apple\u2019s C compilers. This means Terra code achieves near-C performance\u2014often within 5% of equivalent C code compiled with Clang, as demonstrated by benchmarks like ",(0,a.jsx)(r.code,{children:"nbody"})," and ",(0,a.jsx)(r.code,{children:"fannhakunen"})," from the ",(0,a.jsx)(r.a,{href:"http://benchmarksgame.alioth.debian.org",children:"Programming Language Benchmark Game"}),". Here\u2019s a simple example from Terra\u2019s introduction:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-terra",children:'-- Plain Lua code\nfunction printhello()\n    print("Hello, Lua!")\nend\nprinthello()\n\n-- Terra code JIT-compiled via LuaJIT\nC = terralib.includec("stdio.h")\nterra hello(argc : int, argv : &rawstring)\n    C.printf("Hello, Terra!\\n")\n    return 0\nend\nhello(0, nil) -- JIT-compiled and executed\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>o});var n=t(6540);const a={},i=n.createContext(a);function c(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);