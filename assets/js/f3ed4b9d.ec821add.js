"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[884],{2504:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"resource-management/intro","title":"Resource management in Terra","description":"Resource management is a critical aspect of programming languages, and Terra\u2019s new system blends C++\u2019s flexibility with Rust\u2019s ownership principles to deliver safe, efficient defaults while unlocking its metaprogramming potential. This implementation introduces scope-bound resource management, enhancing Terra\u2019s capabilities beyond its historical reliance on manual, C-style methods. In the sections that follow, we\u2019ll explore the core concepts, ownership model, key methods, and practical tutorials\u2014from basic data structures to advanced integrations\u2014showcasing how Terra balances performance, safety, and adaptability.","source":"@site/docs/resource-management/intro.md","sourceDirName":"resource-management","slug":"/resource-management/intro","permalink":"/terra-website/docs/resource-management/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resource-management/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Documentation","permalink":"/terra-website/docs/intro"},"next":{"title":"Core concepts","permalink":"/terra-website/docs/resource-management/core-concepts"}}');var t=a(4848),r=a(8453);const i={},o="Resource management in Terra",c={},l=[{value:"Approaches to resource management",id:"approaches-to-resource-management",level:2},{value:"Scope-Bound Resource Management (RAII)",id:"scope-bound-resource-management-raii",level:2},{value:"Examples of Resources Managed with RAII:",id:"examples-of-resources-managed-with-raii",level:3},{value:"Exploring Terra\u2019s Resource System",id:"exploring-terras-resource-system",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"resource-management-in-terra",children:"Resource management in Terra"})}),"\n",(0,t.jsx)(n.p,{children:"Resource management is a critical aspect of programming languages, and Terra\u2019s new system blends C++\u2019s flexibility with Rust\u2019s ownership principles to deliver safe, efficient defaults while unlocking its metaprogramming potential. This implementation introduces scope-bound resource management, enhancing Terra\u2019s capabilities beyond its historical reliance on manual, C-style methods. In the sections that follow, we\u2019ll explore the core concepts, ownership model, key methods, and practical tutorials\u2014from basic data structures to advanced integrations\u2014showcasing how Terra balances performance, safety, and adaptability."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-terra",children:'terra terraFoo(x : int, y : int, z : bool)\n    if z == true then\n        for i=0,3 do\n            x = x + 1\n        end \n    elseif x == y then\n        return "hello"\n    else\n        return "hello there \\t I am here"\n    end\n    return "who?\\n let the dogs out"\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"approaches-to-resource-management",children:"Approaches to resource management"}),"\n",(0,t.jsx)(n.p,{children:"Resource management in programming languages typically falls into one of three categories:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manual Allocation and Deallocation"}),": Developers explicitly allocate and free resources, like in C.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Advantages: Offers precise control over resource use and timing, maximizing performance in low-level systems."}),"\n",(0,t.jsx)(n.li,{children:"Disadvantages: Prone to human error (e.g., leaks, double frees), requiring meticulous management."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Garbage Collection"}),": A runtime system handles resource cleanup, common in languages like Java or Python.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Advantages: Simplifies coding by automating cleanup, reducing memory-related bugs."}),"\n",(0,t.jsx)(n.li,{children:"Disadvantages: Introduces runtime overhead and unpredictable pauses, less suited for high performance applications."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scope-Bound Resource Management"}),": Resources are tied to object lifetimes and automatically released when objects go out of scope, a hallmark of languages like C++ and Rust (see ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization",children:"RAII on Wikipedia"}),").","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Advantages: Abstracts resource handling beyond memory (e.g., files, mutexes), ensuring deterministic cleanup with minimal overhead while enhancing safety and predictability."}),"\n",(0,t.jsx)(n.li,{children:"Disadvantages: Poses a challenging engineering problem to achieve a fully safe system, where languages like Rust have set the standard."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Historically, Terra relied solely on manual, C-style resource management. Though effective, this method restricted the full potential of Terra\u2019s powerful metaprogramming capabilities. To overcome this constraint, the current implementation introduces scope-bound resource management, bringing Terra closer to modern programming standards while maintaining its performance and metaprogramming edge."}),"\n",(0,t.jsx)(n.h2,{id:"scope-bound-resource-management-raii",children:"Scope-Bound Resource Management (RAII)"}),"\n",(0,t.jsxs)(n.p,{children:["The new implementation adopts scope-bound resource management ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization",children:"RAII"}),", a technique widely used in systems programming languages such as C++ and Rust. In RAII, a resource\u2019s lifecycle is bound to a stack-allocated object that manages it. When the object exits its scope \u2014 unless explicitly returned \u2014 the associated resource is automatically released."]}),"\n",(0,t.jsx)(n.h3,{id:"examples-of-resources-managed-with-raii",children:"Examples of Resources Managed with RAII:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Heap-allocated memory"}),"\n",(0,t.jsx)(n.li,{children:"Threads of execution"}),"\n",(0,t.jsx)(n.li,{children:"Open network sockets"}),"\n",(0,t.jsx)(n.li,{children:"Open files"}),"\n",(0,t.jsx)(n.li,{children:"Locked mutexes"}),"\n",(0,t.jsx)(n.li,{children:"Disk space allocations"}),"\n",(0,t.jsx)(n.li,{children:"Database connections"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"exploring-terras-resource-system",children:"Exploring Terra\u2019s Resource System"}),"\n",(0,t.jsx)(n.p,{children:"Next, we explore the specifics of Terra\u2019s resource management system. We begin with the core concepts that define this approach, followed by an in-depth look at the ownership model driving it. Next, we examine the methods governing destruction, move, and copy assignment, including advanced techniques for fine-tuning move and copy semantics. The section concludes with hands-on tutorials showcasing practical applications, from basic data structures to advanced integrations."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);