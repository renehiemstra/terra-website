"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[1761],{4435:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core-language/metaprogramming/hello-world","title":"A first example","description":"We begin with metaprogramming in terra by reproducing the C example from","source":"@site/docs/core-language/metaprogramming/hello-world.md","sourceDirName":"core-language/metaprogramming","slug":"/core-language/metaprogramming/hello-world","permalink":"/terra-website/docs/core-language/metaprogramming/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-language/metaprogramming/hello-world.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction into metaproramming","permalink":"/terra-website/docs/core-language/metaprogramming/intro"},"next":{"title":"Resource management in Terra","permalink":"/terra-website/docs/core-language/resource-management/intro"}}');var a=n(4848),o=n(8453);const i={},c="A first example",s={},l=[];function d(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"a-first-example",children:"A first example"})}),"\n",(0,a.jsxs)(r.p,{children:["We begin with metaprogramming in ",(0,a.jsx)(r.code,{children:"terra"})," by reproducing the ",(0,a.jsx)(r.code,{children:"C"})," example from\nthe introduction:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-terra",children:'local MSG = "Hello, World!"\nlocal C = terralib.includec("stdio.h")\n\nterra main()\n  C.printf([MSG .. "\\n"])\n  return 0\nend\nmain()\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Compared to the ",(0,a.jsx)(r.code,{children:"C"})," version we observe that ",(0,a.jsx)(r.code,{children:"MSG"})," is not a macro but a valid\n",(0,a.jsx)(r.code,{children:"lua"})," variable. The same applies to the ",(0,a.jsx)(r.code,{children:"C"})," wrapper imported with ",(0,a.jsx)(r.code,{children:"terralib.includec"}),".\nAs we will see later, it is stored as a ",(0,a.jsx)(r.code,{children:"lua"})," table!\nFunction calls from ",(0,a.jsx)(r.code,{children:"stdio.h"})," inside the ",(0,a.jsx)(r.code,{children:"main"})," function are then simple index\noperations on this table. Note that in the last line of our example we explicitly\ncall ",(0,a.jsx)(r.code,{children:"main"}),". In contrast to ",(0,a.jsx)(r.code,{children:"C"}),", where the function ",(0,a.jsx)(r.code,{children:"main"})," is always executed,\n",(0,a.jsx)(r.code,{children:"terra"})," does not run a compiled function by default."]})]})}function m(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var t=n(6540);const a={},o=t.createContext(a);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);