"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[6825],{3311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"standard-library/unit-testing/intro","title":"Unit-testing","description":"Terratest is a lightweight, intuitive unit-testing library designed specifically for the Terra programming language. Implemented as a language extension, it seamlessly integrates with Terra\'s hybrid Lua-Terra ecosystem, providing a simple yet powerful way to test small units of code. With just four constructs\u2014test, testenv, testset, and terracode\u2014it enables both inline assertions and organized test suites.","source":"@site/docs/standard-library/unit-testing/intro.md","sourceDirName":"standard-library/unit-testing","slug":"/standard-library/unit-testing/intro","permalink":"/terra-website/docs/standard-library/unit-testing/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard-library/unit-testing/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Treads","permalink":"/terra-website/docs/standard-library/threads/intro"},"next":{"title":"Writing and evaluating tests","permalink":"/terra-website/docs/standard-library/unit-testing/writing-tests"}}');var i=n(4848),r=n(8453);const a={},d="Unit-testing",o={},l=[{value:"Design and API",id:"design-and-api",level:2},{value:"Instalation and use",id:"instalation-and-use",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"unit-testing",children:"Unit-testing"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"Terratest"})," is a lightweight, intuitive unit-testing library designed specifically for the Terra programming language. Implemented as a language extension, it seamlessly integrates with Terra's hybrid Lua-Terra ecosystem, providing a simple yet powerful way to test small units of code. With just four constructs\u2014",(0,i.jsx)(t.code,{children:"test"}),", ",(0,i.jsx)(t.code,{children:"testenv"}),", ",(0,i.jsx)(t.code,{children:"testset"}),", and ",(0,i.jsx)(t.code,{children:"terracode"}),"\u2014it enables both inline assertions and organized test suites."]}),"\n",(0,i.jsx)(t.h2,{id:"design-and-api",children:"Design and API"}),"\n",(0,i.jsx)(t.p,{children:"The design of terratest emphasizes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Simplicity: A minimal API for straightforward, safe testing without overhead."}),"\n",(0,i.jsxs)(t.li,{children:["Flexibility: Write tests inline or in scoped ",(0,i.jsx)(t.code,{children:"testenv"})," and ",(0,i.jsx)(t.code,{children:"testset"})," blocks."]}),"\n",(0,i.jsx)(t.li,{children:"Integration: Combine Lua and Terra naturally, respecting scoping and closures."}),"\n",(0,i.jsxs)(t.li,{children:["Control: Inline tests run by default, while ",(0,i.jsx)(t.code,{children:"testenv"})," and ",(0,i.jsx)(t.code,{children:"testset"})," require ",(0,i.jsx)(t.code,{children:"--test"})," or ",(0,i.jsx)(t.code,{children:"-t"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Key constructs include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"test"}),": Evaluates a boolean terra expression (e.g., test foo(1) == 2)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"testenv"}),": A named closure for grouping inline tests and testset's, tracking statistics."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"testset"}),": A nested closure within testenv for organizing related tests."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"terracode"}),": A block for Terra statements that can be used in ",(0,i.jsx)(t.code,{children:"testenv"})," and ",(0,i.jsx)(t.code,{children:"testset"})," environments."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This balance makes terratest beginner-friendly yet robust for advanced use, like parameterized testing."}),"\n",(0,i.jsx)(t.h2,{id:"instalation-and-use",children:"Instalation and use"}),"\n",(0,i.jsxs)(t.p,{children:["Simply copy paste the file ",(0,i.jsx)(t.code,{children:"terratest.t"})," into your folder or use the Cosm package manager to add it as a dependency to your project. Subsequently, import the language extension by means of the statement:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-terra",children:'import "terratest"\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now we're ready to go. Let's dive into some examples."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);