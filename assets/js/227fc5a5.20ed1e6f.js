"use strict";(self.webpackChunkterra_website=self.webpackChunkterra_website||[]).push([[538],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const a={},o=r.createContext(a);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},8908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"core-language/metaprogramming/intro","title":"Introduction into metaproramming","description":"Starting with C, many programming languages have support for multistage","source":"@site/docs/core-language/metaprogramming/intro.md","sourceDirName":"core-language/metaprogramming","slug":"/core-language/metaprogramming/intro","permalink":"/terra-website/docs/core-language/metaprogramming/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-language/metaprogramming/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"intro","permalink":"/terra-website/docs/core-language/intro"},"next":{"title":"A first example","permalink":"/terra-website/docs/core-language/metaprogramming/hello-world"}}');var a=n(4848),o=n(8453);const i={},s="Introduction into metaproramming",c={},m=[];function l(e){const t={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"introduction-into-metaproramming",children:"Introduction into metaproramming"})}),"\n",(0,a.jsxs)(t.p,{children:["Starting with ",(0,a.jsx)(t.code,{children:"C"}),", many programming languages have support for multistage\nor metaprogramming. This means that there is a second language, usually with\ndestinct syntax, that is interpretered ",(0,a.jsx)(t.em,{children:"before"})," the the main language.\nFor ",(0,a.jsx)(t.code,{children:"C"})," this is the preprocessor. It is a simple text replacement\nmechanism that allows to automatically generate code. A simple example is"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-C",children:'#define MSG "Hello World!"\n#include <stdio.h>\n\nint main()\n{\n  printf(MSG"\\n");\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"This generates the output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"Hello World!\n"})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);